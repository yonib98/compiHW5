%{
    #include<iostream>
    #include "bp.hpp"
    #include "hw3_output.hpp"
    #include "types.h"
    #include "code_gen.h"
    using namespace std;
    using namespace output;

    int yylex();
    void yyerror(char const*);
    extern void fix_normal_exp(TypeNode *e);
    extern int yylineno;
    extern SymTable table;
    extern CodeGenerator cg;
    extern std::vector<std::string> start_labels_while_vec;
    extern std::vector<std::vector<pair<int, BranchLabelIndex>>> end_addresses_while_vec;
%}

%union{
    TypeNode* typeNode;
    BinopNode* binopNode;
    IdNode* idNode;
    StringNode* stringNode;
    NumNode* numNode;
    BoolNode* boolNode;
    RelopNode* relopNode;
    NodeParams* nodeParams;
    FuncCallNode* funcCallNode;
    MarkerNode* markerNode;
    NarkerNode* narkerNode;
}

%token <numNode> NUM
%token VOID
%token INT
%token BYTE
%token B
%token BOOL



%token <boolNode> TRUE
%token <boolNode> FALSE
%token RETURN

%token WHILE
%token BREAK
%token CONTINUE
%token SC
%token COMMA
%token LBRACE
%token RBRACE
%token <idNode> ID
%token <stringNode> STRING

%nonassoc IF

%left ASSIGN

%left OR
%left AND

%left <relopNode> RELOP

%left <binopNode> ADD_MIN
%left <binopNode> MUL_DIV

%right NOT

%left RPAREN
%left LPAREN

%nonassoc ELSE

%type <typeNode> RetType
%type <nodeParams> Formals
%type <nodeParams> FormalsList
%type <nodeParams> FormalDecl
%type <funcCallNode> Call;
%type <typeNode> ExpList
%type <typeNode> Type
%type <typeNode> Exp;
%type <typeNode> ExpForIf;
%type <markerNode> AfterIf;
%type <markerNode> M;
%type <narkerNode> N;

%%
Program: {start_program();} Funcs {end_program(yychar, YYEOF, yylineno);}


 Funcs: /*epsilon*/ {}
		| FuncDecl Funcs {}


 FuncDecl: RetType ID LPAREN Formals RPAREN {table.create_func($1, $2, $4, yylineno);} LBRACE Statements RBRACE
 {table.pop_scope(); cg.gen_ret($1);}


 RetType: Type {$$ = $1;}
		  | VOID {$$ = new TypeNode(_VOID, false);}

 Formals : /*epsilon*/ {$$ = nullptr;}
		  | FormalsList {$$ = $1;}

FormalsList : FormalDecl {$$ = $1; }
			  | FormalDecl COMMA FormalsList { $1->next = $3; $3->back = $1; $$ = $1;}


 FormalDecl : Type ID {$$ = new NodeParams($1, $2);}


 Statements: Statement {}
			 | Statements Statement {}

ExpForIf: Exp {table.check_exp_is_bool($1, yylineno); table.push_scope(); $$=$1;  cg.gen_if_bool($1);}
AfterIf: {table.pop_scope();}

 Statement: LBRACE {table.push_scope();} Statements RBRACE {table.pop_scope();}
            | Type ID SC {table.insert_symbol($1,$2, yylineno);}
			| Type ID ASSIGN Exp SC {table.insert_and_check_symbol($1,$2,$4, yylineno); fix_normal_exp($4);}
			| ID ASSIGN Exp SC {table.check_symbol($1, $3, yylineno);fix_normal_exp($3);}
			| Call SC {table.check_func($1, yylineno);}
			| RETURN SC {table.check_return(yylineno); CodeBuffer::instance().emit("ret void");}
			| RETURN Exp SC {table.check_return($2->type, yylineno);cg.gen_ret_with_exp($2); fix_normal_exp($2);}
			| IF LPAREN ExpForIf RPAREN M Statement AfterIf {cg.gen_if($3, $5->label); fix_normal_exp($3);}
			| IF LPAREN ExpForIf RPAREN M Statement AfterIf ELSE {table.push_scope();} N M Statement {table.pop_scope(); cg.gen_if_else($3, $5->label, $10, $11->label); fix_normal_exp($3);}
			| WHILE LPAREN N M  {table.push_scope(); table.while_scope++; cg.gen_start_while($4->label, $3);}
			    Exp RPAREN {table.check_exp_is_bool($6, yylineno);} M Statement
			    {table.pop_scope(); table.while_scope--; cg.gen_while($6 ,$9->label, $4->label); fix_normal_exp($6); }
			| BREAK SC {table.check_break(yylineno); cg.gen_break();} //Inside while
			| CONTINUE SC {table.check_continue(yylineno); cg.gen_continue();} //Inside while

Call: ID LPAREN ExpList RPAREN {$$ = new FuncCallNode($1, $3);}
      | ID LPAREN RPAREN {$$ = new FuncCallNode($1);}


ExpList: Exp {$$ = $1; fix_normal_exp($1);}
         | Exp COMMA ExpList {$1->next = $3; $3->back = $1; $$ = $1; fix_normal_exp($1);}


Type: INT {$$=new TypeNode(_INT, false);}
      | BYTE {$$=new TypeNode(_BYTE, false);}
	  | BOOL {$$=new TypeNode(_BOOL, false);}


Exp: LPAREN Exp RPAREN {$$ = $2;}
	 | Exp IF N LPAREN Exp RPAREN ELSE Exp {$$ = table.find_type_from_tri($1,$5,$8, yylineno); cg.gen_tri($1, $3, $5, $8, $$);} %prec IF
     | Exp ADD_MIN Exp {$$ = table.find_type_from_add_min($1, $3, yylineno); cg.gen_exp_binop($$, $1, $3, $2->op); }
     | Exp MUL_DIV Exp {$$ = table.find_type_from_mul_div($1, $3, yylineno);cg.gen_exp_binop($$, $1, $3, $2->op);}
	 | ID {$$ = table.find_type_from_id($1, yylineno);}
	 | Call {$$ = table.find_type_from_call_func($1, yylineno);}
	 | NUM {$$ = new TypeNode(_INT, true); cg.gen_exp_num($$, $1->value); }
	 | NUM B {table.check_byte($1, yylineno); $$ = new TypeNode(_BYTE, true); cg.gen_exp_num($$, $1->value);}
	 | STRING {$$ = new TypeNode(_STRING, true); cg.gen_string($$, $1->value);}
	 | TRUE {$$ = new TypeNode(_BOOL, true); cg.gen_bool($$, $1->value);}
	 | FALSE {$$ = new TypeNode(_BOOL, true); cg.gen_bool($$, $1->value);}
	 | NOT Exp {table.check_logical_op($2, yylineno); $$ = new TypeNode(_BOOL, true);}
	 | Exp AND M Exp {table.check_logical_op($1, $4, yylineno); $$ = new TypeNode(_BOOL); cg.gen_exp_and($$, $1, $4, $3->label);}
	 | Exp OR M Exp {table.check_logical_op($1, $4, yylineno); $$ = new TypeNode(_BOOL); cg.gen_exp_or($$, $1 ,$4, $3->label);}
	 | Exp RELOP Exp {table.check_relop($1, $3, yylineno); $$ = new TypeNode(_BOOL); cg.gen_exp_relop($$, $1, $3, $2->relop);}
	 | LPAREN Type RPAREN Exp {table.check_casting($2, $4, yylineno); $$ = new TypeNode($2->type, true);}

M: /*epsilon*/ {$$ = new MarkerNode();}
N: /*epsilon*/ {$$ = new NarkerNode();}

%%

int main()
{
    return yyparse();
}

void yyerror(char const* s){
    errorSyn(yylineno);
}
